{
  "Hide a specific model": {
    "prefix": "Hide Model",
    "body": [
      "for _, v in pairs(${1|vanilla_model,armor_model,elytra_model|}) do",
      "\tv.setEnabled(false)",
      "end",
      ""
    ],
    "description": "For hiding a specific model."
  },
  "Trust Limit Warnings": {
    "prefix": "Warnings",
    "body": [
      "function tick()",
      "\tif (meta.getCurrentTickCount() > 4096) then",
      "\t\tlog(\"WARNING: Tick instruction limit has been reached!\")",
      "\tend",
      "\tif (meta.getCurrentRenderCount() > 1024) then",
      "\t\tlog(\"WARNING: Render instruction limit has been reached!\")",
      "\tend",
      "\tif (meta.getCurrentComplexity() > 1152) then",
      "\t\tlog(\"WARNING: Complexity limit has been reached!\")",
      "\tend",
      "end",
      ""
    ],
    "description": "Warnings in chat when trust settings limits are reached."
  },
  "math.sin(world.getTime())": {
    "prefix": "Sine Wave",
    "body": [
      "math.sin(world.getTime()*${1:speed})*${2:strength}"
    ],
    "description": "Sine wave with speed and strength."
  },
  "Using lerp to smooth": {
    "prefix": "Smooth Animation",
    "body": [
      "${1:pos} = 0",
      "_${1} = 0",
      "",
      "function tick()",
      "\t_${1} = ${1}",
      "\t${1} = math.sin(world.getTime())",
      "end",
      "",
      "function render(delta)",
      "\tmodel.${2:cube}.setPos({0,lerp(_${1},${1},delta),0})",
      "end",
      ""
    ],
    "description": "Generates base structure for using lerp to smooth out movements."
  },
  "Lerp function": {
    "prefix": "Lerp",
    "body": [
      "function lerp(a, b, x)",
      "\treturn a + (b - a) * x",
      "end",
      ""
    ],
    "description": "Lerp function."
  },
  "Clamp Function": {
    "prefix": "Clamp",
    "body": [
      "function clamp(value,low,high)",
      "\treturn math.min(math.max(value, low), high)",
      "end",
      ""
    ],
    "description": "Clamp function."
  },
  "Execute every X ticks": {
    "prefix": "Timer",
    "body": [
      "if world.getTime() % ${1:20} == 0 then",
      "\t${0}",
      "end"
    ],
    "description": "Execute every X ticks. Default is 20 ticks (1 second)"
  },
  "Tick function": {
    "prefix": "tick()",
    "body": [
      "function tick()",
      "\t${0}",
      "end"
    ],
    "description": "Inserts the tick function."
  },
  "Render function": {
    "prefix": "render()",
    "body": [
      "function render(delta)",
      "\t${0}",
      "end"
    ],
    "description": "Inserts the render function."
  },
  "World Render function": {
    "prefix": "world_render()",
    "body": [
      "function world_render(delta)",
      "\t${0}",
      "end"
    ],
    "description": "Inserts the world_render function."
  },
  "Player Init function": {
    "prefix": "player_init()",
    "body": [
      "function player_init()",
      "\t${0}",
      "end"
    ],
    "description": "Inserts the player_init function."
  },
  "Player Velocity": {
    "prefix": "Player Velocity",
    "body": [
      "pos = nil",
      "_pos = nil",
      "velocity = nil",
      "",
      "function player_init()",
      "\tpos = player.getPos()",
      "\t_pos = pos",
      "\tvelocity = vectors.of({0})",
      "end",
      "",
      "function tick()",
      "\t_pos = pos",
      "\tpos = player.getPos()",
      "\tvelocity = pos - _pos",
      "end",
      ""
    ],
    "description": "Player velocity calculation."
  }
}